$(document).ready(function () {	
	// Check if this is the training page
if ($(".workouts_graph").length == 1) { 
	// Initialize local variables.
	  var user_id = $(".workouts_graph").data("user_id");
	  var metric = "Load Volume";
	  var category = "All";
	  var time = "One-Week";
	
	  // Begin ajax request.	
	  $.ajax({
		url: "/users/" + user_id +"/workouts/analyze.json",
		data: { metric: metric, category: category, time: time },
		dataType: "json",
		success: function(response) {
			
		data = response;
		
	   	 // Define graph area and margin areas.
		    var margin = {top: 20, right: 20, bottom: 40, left: 00},
		        w = 500,
				h = 250 - margin.top - margin.bottom,
		        barWidth = 25,
				padding = 0;

			// Set the X and Y scales.		
			var x = d3.time.scale().domain([d3.time.day.offset(new Date(), -12), d3.time.day.offset(new Date(), 1)])
				.rangeRound([0, w - margin.left - margin.right]);
		    var y = d3.scale.linear().domain([0, d3.max(data, function(d) { return d.load_volume; })])
		        .range([h - margin.top - margin.bottom, 0]);

			// Process Data.
			convertToMilliseconds(data); // Interpolate missing dates.

			// Set the xAxis
			var xAxis = d3.svg.axis()
				.scale(x)
				.orient('bottom')
				.ticks(d3.time.days, 1)
				.tickFormat(d3.time.format('%d'))
				.tickSize(0)
				.tickPadding(8);

			// Create the SVG graph.
			var svg = d3.select("#graphContainer").insert("svg", "#training_stats")
			    .attr("class", "chart")
			    .attr("width", w)
			    .attr("height", h)
				.append("g")
			    .attr("transform", "translate(" + (margin.left) + "," + margin.top + ")").attr("id", "graph");

			// Set up the tooltips.
			var tooltip = d3.select("body").append("div")
				.attr("class", "tooltip");

			// Date format for tooltip.	
			var formatTime = d3.time.format("%A %b %e");	

		    // Draw the bars and make them interactive.
		    var bar = svg.selectAll("rect")
		        .data(data).enter().append("rect")
		        .attr("x", function(d) { return x(d.date); })
		        .attr("y", function(d) { return d.load_volume == 0 ? (h - margin.bottom - margin.top - margin.bottom + 30) : y(d.load_volume) })
		        .attr("height", function(d) { return d.load_volume == 0 ? 30 : h - margin.top - margin.bottom - y(d.load_volume) })
		        .attr("width", barWidth)
				.attr("class", "bar")
		        .style("fill", function(d) { return d.load_volume == 0 ? "#888" : "#00e0fe"})
				.on("mouseover", function(d, i) { return barMouseOver(d, i, x, y, bar, tooltip, formatTime, user_id, time, metric) })
				.on("mouseout", function (d, i) { return barMouseOut(d, i, bar, tooltip) });

				toolTipMouseOver(tooltip);

		    // Draw the text.
		    var text_label = svg.selectAll("text").data(data)
		        .enter().append("text")
				.attr("x", function(d,i) { return x(new Date(d.date)) + barWidth/2; })
		        .attr("y", function(d) { return y(d.load_volume) > (0.125 * (d3.max(data, function(d) { return d.load_volume; }))) ? y(d.load_volume) + 20 : y(d.load_volume) + 20; })
				.attr("text-anchor", "middle")
		        .text(function(d) { return d.load_volume == 0 ? null : format(d.load_volume) });

			// Draw the xAxis
			svg.append('g').attr('class', 'x axis')
			   .attr('transform', 'translate(' + padding + ',' + (h - margin.bottom - margin.top) + ')')
			   .call(xAxis)
			   .selectAll("text").attr("dx", "0.5em");
		
		}, // end success callback
			error: function (xhr, textStatus) {
				if (xhr.status == 500) {
					alert('Server error: ' + textStatus)
				}
			}  // end error handling
		}); // end ajax
} // end training page check
});  // end document.ready	
